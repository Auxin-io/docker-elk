def isThisTagUpdate() { 

    // Get the variable from env variable
    def inputBranchName = "${env.GIT_BRANCH}"
    echo inputBranchName

    // Tokenize the input
    def (remoteName, tags, tagName) = inputBranchName.tokenize( '/' )

    // Get the Tag name
    echo remoteName
    echo tags

    return tags == 'tags'
}

pipeline  {
    environment   {

        // these should be parameters to the job
        // the default value can be set using parameters
        AWS_ACCOUNT_ID="${AWS_ACCOUNT_ID}"
        AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION}"
        IMAGE_REPO_NAME="${IMAGE_REPO_NAME}"
        registryCredential="${registryCredential}"

        // Build the registry
        registry = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"

        // Conditonal Dynamic variables
        IsThisTagUpdate = isThisTagUpdate()
    }

    /*
     * Usefule reference links:
     * https://stackoverflow.com/questions/44330148/run-bash-command-on-jenkins-pipeline
     * https://stackoverflow.com/questions/48762111/how-to-detect-jenkins-multibranch-branch-or-tag
     */

    // Build on any  agent
    agent any

    // stages
    stages {

        // Build Docker stage This stage is centralized for both production and dev
        stage('Build Engine Image') {
            steps{

                // Groovy or shell code must go inside script tags
                script {

                    // Echo some sanity value
                    echo "is this is a tag build: ${env.IsThisTagUpdate}"

                    // Define a variable
                    def isThisTagBuild = "${env.IsThisTagUpdate}"
                    echo isThisTagBuild

                    // Build a dockerfile for engine
                    def buildOptionsElasticsearch = """\
                        -f elasticsearch/Dockerfile \
                        ."""

                    // Build a dockerfile for agent
                    def buildOptionsKibana = """\
                        -f kibana/Dockerfile \
                        ."""
                    // Build a docker file for steampipe
                    def buildOptionsLogstash = """ \
                        -f logstash/Dockerfile \
                        ."""

                    if ( isThisTagBuild == "true" ){

                        echo "We are building a Tag Build"


                        // Get the tag name
                        def inputBranchName = "${env.GIT_BRANCH}"
                        echo inputBranchName

                        // Tokenize the input
                        def (remoteName, tags, tagName) = inputBranchName.tokenize( '/' )
                        echo tagName

                        // Build the image for engine with git tags
                        dockerImageElasticsearch = docker.build(registry + ":$JOB_BASE_NAME" + "_$tagName", buildOptionsElasticsearch)

                        // Build the image for agent with git tags
                        dockerImageKibana = docker.build(registry + ":$JOB_BASE_NAME" + "-agent" + "_$tagName", buildOptionsKibana)

                        // Build the image for steampipenode agent with git tags
                        dockerImageLogstash = docker.build(registry + ":$JOB_BASE_NAME" + "-steampipeagent" + "_$tagName", buildOptionsLogstash)

                    }
                    else{
                        echo "We are building a non tag build"


                        // make the image using base tag name for engine
                        dockerImageElasticsearch = docker.build(registry + ":$JOB_BASE_NAME", buildOptionsElasticsearch)

                        // make the image using base tag name for agent
                        dockerImageKibana = docker.build(registry + ":$JOB_BASE_NAME", buildOptionsKibana)

                        // make the image using base tag name for steampipe agent
                        dockerImageLogstash = docker.build(registry + ":$JOB_BASE_NAME", buildOptionsLogstash)
                }
            }
        }

        // Stage to publish to ECR
        stage('Publish to ECR') {
            steps{

                // Groovy or shell code must go inside script tags
                script {
                    docker.withRegistry("https://" + registry, "ecr:us-east-1:" + registryCredential) {
                        dockerImageElasticsearch.push()
                        dockerImageKibana.push()
                        dockerImageLogstash.push()
                    }
                }
            }
        }
    }
}

}
