def isThisTagUpdate() { 

    // Get the variable from env variable
    def inputBranchName = "${env.GIT_BRANCH}"
    echo inputBranchName

    // Tokenize the input
    def (remoteName, tags, tagName) = inputBranchName.tokenize( '/' )

    // Get the Tag name
    echo remoteName
    echo tags

    return tags == 'tags'
}

pipeline  {
    environment   {

        // these should be parameters to the job
        // the default value can be set using parameters
        AWS_ACCOUNT_ID="${AWS_ACCOUNT_ID}"
        AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION}"
        IMAGE_REPO_NAME="${IMAGE_REPO_NAME}"
        registryCredential="${registryCredential}"

        // Build the registry
        registry = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"

        // We need two images (Agnet and engine)
        dockerImageEngine = ''
        dockerImageAgent = ''

        // Conditonal Dynamic variables
        IsThisTagUpdate = isThisTagUpdate()
    }

    /*
     * Usefule reference links:
     * https://stackoverflow.com/questions/44330148/run-bash-command-on-jenkins-pipeline
     * https://stackoverflow.com/questions/48762111/how-to-detect-jenkins-multibranch-branch-or-tag
     */

    // Build on any  agent
    agent any

    // stages
        stages {
                stage('Build and Images') {
                    steps {
                        script {
                            def dockerfiles = ['elasticsearch/Dockerfile', 'kibana/Dockerfile', 'logstash/Dockerfile', 'setup/Dockerfile']
                            def imageNames = ['elasticsearch', 'kibana', 'logstash', 'elk-setup']
                            
                            for (int i = 0; i < dockerfiles.size(); i++) {
                                def dockerfile = dockerfiles[i]
                                def imageName = imageNames[i]
                                
                                // Build and tag the Docker image
                                docker.build(imageName, "-f ${dockerfile} .")
                            }
                        }
                    }
                }

        // Stage to publish to ECR
        stage('Publish to ECR') {
            steps{

                // Groovy or shell code must go inside script tags
                script {
                        // Push the Docker image to a registry
                        docker.withRegistry("https://" + registry, "ecr:us-east-1:" + registryCredential) {
                            docker.image(imageName).push()
                        }
                    }
                }
            }
        }
    }
}