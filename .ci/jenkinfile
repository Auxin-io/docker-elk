def isThisTagUpdate() { 

    // Get the variable from env variable
    def inputBranchName = "${env.GIT_BRANCH}"
    echo inputBranchName

    // Tokenize the input
    def (remoteName, tags, tagName) = inputBranchName.tokenize( '/' )

    // Get the Tag name
    echo remoteName
    echo tags

    return tags == 'tags'
}

pipeline  {
    environment   {

        // these should be parameters to the job
        // the default value can be set using parameters
        AWS_ACCOUNT_ID="${AWS_ACCOUNT_ID}"
        AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION}"
        IMAGE_REPO_NAME="${IMAGE_REPO_NAME}"
        registryCredential="${registryCredential}"

        // Build the registry
        registry = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"

        // Conditonal Dynamic variables
        IsThisTagUpdate = isThisTagUpdate()

        // Docker image used for pushing
        dockerImage = ''
       
        // Get Current Time
        // https://www.thiscodeworks.com/current-date-at-pipeline-method-1-variable-groovy-jenkins-pipeline/610bc8aef724050014f7d22f
        currentDate = sh(returnStdout: true, script: 'date --utc +%Y-%m-%d-%H-%M-%S').trim()
    }

    /*
     * Usefule reference links:
     * https://stackoverflow.com/questions/44330148/run-bash-command-on-jenkins-pipeline
     * https://stackoverflow.com/questions/48762111/how-to-detect-jenkins-multibranch-branch-or-tag
     */

    // Build on any  agent
    agent any

    // stages
        stages {
            stage('Build and Images') {
                steps {
                    script {
                         
                        // List of the location of docker files
                        def dockerfiles = ['elasticsearch/Dockerfile', 'kibana/Dockerfile', 'logstash/Dockerfile']
                        
                        // List of the image name
                        def imageNames = ['elasticsearch', 'kibana', 'logstash']
                        
                        //for (int i = 0; i < dockerfiles.size(); i++) {
                        for (int i = 0; i < 1; i++) {
                            def dockerfile = dockerfiles[i]
                            def imageName = imageNames[i]
                            
                            // Build and tag the Docker image
                            dockerImage = docker.build(imageName, "-f ${dockerfile} .")

                            // push the image 
                            docker.withRegistry("https://" + registry, "ecr:us-east-1:" + registryCredential) {
                                dockerImage.push()
                            }
                        }
                    }
                }
            }
        }
    }
